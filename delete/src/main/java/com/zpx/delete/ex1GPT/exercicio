Claro, aqui está um exercício simples de injeção de dependência em um aplicativo Spring Boot sem a resposta:

**Objetivo:** Crie um aplicativo Spring Boot que simule a funcionalidade de um banco. O aplicativo deve ser capaz de criar contas bancárias, depositar e sacar dinheiro das contas e consultar o saldo.

**Requisitos:**

1. Crie uma classe `ContaBancaria` com atributos como `id`, `nomeDoTitular` e `saldo`.

2. Crie uma interface `BancoService` que defina métodos para criar contas bancárias, depositar dinheiro, sacar dinheiro e consultar o saldo.

3. Implemente a interface `BancoService` em uma classe chamada `BancoServiceImpl`. Esta classe deve conter a lógica para gerenciar as contas bancárias e realizar operações.

4. Crie um controlador (`BancoController`) que permita a interação com o aplicativo através de URLs. Defina métodos para criar contas, depositar dinheiro, sacar dinheiro e consultar o saldo.

5. Configure o aplicativo Spring Boot para funcionar corretamente com injeção de dependência, de modo que o `BancoController` possa usar o `BancoService` para realizar operações bancárias.

6. Implemente uma interface de usuário simples (pode ser um frontend em HTML, se desejar) que permita ao usuário criar contas, depositar e sacar dinheiro, bem como consultar o saldo.

**Dica:** Use anotações do Spring como `@RestController`, `@Service` e `@Autowired` para configurar as classes e a injeção de dependência.

Este exercício envolve a criação de várias classes, configurações e interações entre elas. Ele ajudará você a entender como criar um aplicativo Spring Boot com injeção de dependência e a construir uma aplicação bancária simples. Boa sorte!